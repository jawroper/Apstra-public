#!/bin/bash
########
#
#
#  NAME: getDPSCCW
#  PURPOSE: Used to download Collectors, Configlets, Dashboards, Probes,
#           Service Registries, and Widgets from an Apstra server
#
#  CREATED: 05/09/24
#  BY: Jay A Wilson
#
#  LAST MOD: 05/22/24
#  BY: Jay A Wilson
#  VERSION: 1.10
#
#  MODIFICATION HISTORY:
#      v1.00 = Initial Release
#      v1.01 = cleaned up help-info()
#      v1.10 = removed graph queries
#              added BPname to output files for Probes, Widgets, and Dashboards
#
#
#
########

# GLOBAL VARs

DEBUG=0
JDEBUG=0
DSELECT=0
JAPI=0
# SKIP is currently not used
SKIP=0
NOTSILENT=1
CLEAN=0
MUEXC=0
LASTARGCHECK=0
FOUNDLOADDEV=0

# change EXPATTERN if there is a Configlet, Dashboard, or Services labeled Z9A0Z9A0
EXPATTERN="z9a0z9a0"
JEXCLUDE=$EXPATTERN
JINCLUDE=""

argcnt=$#
args=("$@")
###########
#
# called by main() to process the arguments
#
###########
do-args(){
  set -- "${args[@]}"
  while [[ $# -gt 0 ]]
  do
      key=`echo "$1" | tr '[:upper:]' '[:lower:]'`
      case $key in
        -ai|--Apstraip)
            initApstraIP="$2"
            if [ "$initApstraIP" == "" ]; then LASTARGCHECK=1; fi
            shift # past argument
            shift # past value
            valid-aosip
        ;;
        -au|--Apstrauid)
            ApstraUID="$2"
            if [ "$ApstraUID" == "" ]; then LASTARGCHECK=1; fi
            shift # past argument
            shift # past value
        ;;
        -ap|--Apstrapwd)
            ApstraPWD="$2"
            if [ "$ApstraPWD" == "" ]; then LASTARGCHECK=1; fi
            shift # past argument
            shift # past value
        ;;
        -in|--include)
            JINCLUDE="$2"
            shift # past argument
            shift # past value
        ;;
        -o|--output)
            LOGOUTPUT="$2"
            shift # past argument
            shift # past value
        ;;
        -ex|--exclude)
            JEXCLUDE="$2"
            shift # past argument
            shift # past value
        ;;
        -p|--api)
            JAPI=1
            shift
        ;;
        -s|--skip)
            SKIP=1
            shift
        ;;
        -h|--help)
            help-info
            exit 0
        ;;
        -x)
            DEBUG=1
            shift
        ;;
        -xj)  # normal DEBUG + DUMP returned JSON returned from curl
            JDEBUG=1
            DEBUG=1
            shift
        ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            shift # past argument
        ;;
      esac
  done
  set -- "${POSITIONAL[@]}"
  # verify that if the argument specificed on the command line requires a parm
  #    that the parm was specificed and not forgotten to be entried
  if [ $LASTARGCHECK -eq 1 ]; then
    echo ""; echo " The Last argument on the command is missing it's required parm"; echo " ...exit()"
    exit 1
  fi
  # all the Apstra login information is always required
  if [ -z "$ApstraUID" ] || [ -z "$ApstraIP" ] || [ -z "$ApstraPWD" ]; then
    echo ""; echo " You are missing >=1 Apstra parms: -ai, -au, and/or -ap"; echo " ...exit()"
    exit 1
  fi
  # need to know where to retrieve the output too
  if [ -n "$LOGOUTPUT" ] && [ ! -d "${LOGOUTPUT}/" ]; then
    echo ""; echo " Output directory does not exist"; echo " ...exit()"
    exit 1
  fi
  if [ "$JINCLUDE" != "" ] && [ "$JEXCLUDE" != "$EXPATTERN" ]; then
    echo ""; echo " Parms -ex and -in are mutually exclusive."; echo " ...exit()"
    exit 1
  fi
  # acknowledge which widgets will be included
  if [ "$JINCLUDE" != "" ]; then
    JINCLUDE=`echo $JINCLUDE | tr '[:upper:]' '[:lower:]'`
    echo ""; echo "*** Only Widgets with \"$JINCLUDE\" in its name will appear in the listing."; echo ""
  fi
  # acknowledge which D/S/C/C will be excluded
  if [ "$JEXCLUDE" != "$EXPATTERN" ]; then
    JEXCLUDE=`echo $JEXCLUDE | tr '[:upper:]' '[:lower:]'`
    echo ""; echo "*** Any Entry with \"$JEXCLUDE\" in its name will be excluded from the listing."; echo ""
  fi
  # verify that jq is installed
  if [ -z `which jq` ]; then
    echo " "; echo " The package \"jq\" must be installed to use this script"
    echo " "; echo " Download and installation instructions can be found at:"
    echo " "; echo "     https://https://stedolan.github.io/jq/download/"
    echo " "; echo " ...exit()"
    exit 1
  fi
}
########
#
#  Called by do-args() if --help was specified as the command arg
#
#######
help-info(){
    echo ""
    echo "  This tool retrieves Collectors, Configlets, Dashboards, Probes,"
    echo "      Service Registries, or Widgets from an Apstra server."
    echo ""
    echo "  Entry names that contain <spaces> or /s will have"
    echo "    those characters converted to a - "
    echo ""
    echo "  syntax: "
    echo "      getDPSCCW  -ai|--Apstraip <Apstra-ip>     *"
    echo "                 -au|--Apstrauid <Apstra-uid>   *"
    echo "                 -ap|--Apstrapwd <Apstra-pwd>   *"
    echo "                 -ex|--exclude <string>         ^"
    echo "                 -in|--include <string>         ^"
    echo "                  -o|--output <directory>"
    echo "                  -p|--api"
    echo "                  -h|--help"
    echo ""
    echo "               * = required"
    echo "               ^ = case insensitive"
    echo ""
    echo ""
    echo "(PAUSED) - press <Enter>"
    read jnull
    echo "  Option Details:"
    echo ""
    echo "  -ex and -in"
    echo "      The exclude option is only valid for Collectors, Configlets,"
    echo "       Dashboards, and Services."
    echo ""
    echo "      The include option is only valid for Widgets."
    echo ""
    echo "      If the exclude or include string contains special"
    echo "        characters, enclose the string in '' "
    echo ""
    echo "     Why Widgets can use an \"include\" instead of an \"exclude\":"
    echo "        Because there is no meta data in the graphDB I can use to"
    echo "        distingue a built-in widget from a user-crafted widget. The"
    echo "        \"include\" prevents the 70+ built-in widgets from appearing"
    echo "        in the listing."
    echo ""
    echo " -o  directory to store output into"
    echo " -p  formats Configlet output to be consumable by an Apstra POST API"
}
#####
#
#  Called to varify IP addresses passed as parms are syntax correct
#
#####
valid-aosip(){
  rx='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'
  if [[ $initApstraIP =~ ^$rx\.$rx\.$rx\.$rx$ ]]; then
    ApstraIP=$initApstraIP
  else
    echo " IP address for From Apstra is not valid"; echo " ...exit()"
    exit 1
  fi
}
#####
#
#  called by main() to clear the tmp files used
#
#####
clear-json(){
  rm -f -- /tmp/Apstratoken.json
}
#####
#
#  Build the json needed to ask for a Keystone token for all the other
#  curl calls to the Controller
#
#####
build-tokens(){
  # JSON to request Apstra Token
  cat > /tmp/Apstratoken.json <<EOF
{
  "username":"${ApstraUID}",
  "password": "${ApstraPWD}"
}
EOF

}
#####
#
#  called my main() to get tokens for Apstra
#
#####
get-tokens(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-Token) K:(FromIP) $ApstraIP"; fi
  Apstratoken=`curl -s -k -H "Content-Type: application/json" --data-binary @/tmp/Apstratoken.json -X POST https://$ApstraIP/api/aaa/login |
  awk '/token/ {print $2};{next}' |
  sed -e 's/",//' -e 's/^"//'`
}
#####
#
# called by main() to get a listing of all defined blueprints
#
#####
get-BPlist(){
  #create and array of all the Blueprints defined in the Apstra server
  BPFlist=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints |
           jq '.items[] | .label, .id' | sed 'N;s/\n/,/' | sed -e 's/ /~/g' | sed -e 's/"//g') )
  BPFlistelements=${#BPFlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPFs) K:(BPFlistelements) $BPFlistelements"; fi
}
#####
#
# called by main() to get the details of each blueprint
#
#####
get-BPFdetails(){
  echo " From Blueprints:"
  for((ij=0;ij<$BPFlistelements;ij++))
  do
    BPFname=`echo "${BPFlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    BPFUUID=`echo "${BPFlist[ij]}" | cut -d',' -f2`
    echo $ij" "$BPFname
    if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPFdetails) K:(BPFname) $BPFname  K:(BPFUUID) $BPFUUID"; fi

    BPFitem=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/${BPFUUID}/experience/web/system-info |
            awk 'BEGIN { RS="," }; { print $0}' | grep -v server |
            grep -A12 hostname | awk 'BEGIN { RS="--"}; {print $0}' |
            grep -e system_id -e role | sed 'N;s/\n/,/' |
            grep -v null | sed 's/",//' | sed 's/"//g') )
    BPFitemelements=${#BPFitem[@]}
    if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPFdetails) K:(BPFname) $BPFname  K:(BPFlistelements) $BPFlistelements K:(ij) $ij"; fi
    if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPFdetails) K:(BPFname) $BPFname  K:(BPFitemelements) $BPFitemelements"; fi
    #do-BPdetails
  done
  jfcnt=$(( $ij - 1 ))
  get-BPfromNumber
  fromBPname=`echo "${BPFlist[fromsponse]}" | cut -d',' -f1 | sed -e 's/~/ /g'`
  fromBPUUID=`echo "${BPFlist[fromsponse]}" | cut -d',' -f2`
}

#####
#
# called by get-BPdetails() to get user input as to the FROM BP
#
#####
get-BPfromNumber(){
  loop2=0
  echo ""
  echo " Input \"FROM\" Number "
  while [ $loop2 -eq 0 ]
  do
     read fromsponse
     case $fromsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromsponse" -ge "0" ] && [ "$fromsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPdetails) K:(fromsponse) $fromsponse"; fi
  done
}
#####
#
# called by mine() to determine what Entry type to retrieve
#
#####
get-WhatToRetrieve(){
  loop2=0
  echo ""
  echo "0 All"
  echo "1 Collectors"
  echo "2 Configlets"
  echo "3 Dashboards"
  echo "4 Probes"
  echo "5 Service Registries"
  echo "6 Widgets"
  echo ""
  echo " Input \"What to Retrive\" Number "
  while [ $loop2 -eq 0 ]
  do
     read Esponse
     case $Esponse in
       [1-6])
          if [ "$Esponse" -ge "1" ] && [ "$Esponse" -le "6" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       0) echo "Currently not implimented...try again"
       ;;
       *) echo " Invalid character...try again"
       ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-BPdetails) K:(fromsponse) $fromsponse"; fi
  done
}
#
#
# COLLECTOR ROUTINES
#
#
#####
#
# called by main() to get a listing of all Services
#
#####
get-COLLECTlist(){
  #create and array of all the Custom Services
  #curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/telemetry/collectors | jq '.items | keys[]' | sort --ignore-case
  COLLECTarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/telemetry/collectors |
   jq '.items | keys[]' | sort --ignore-case | sed 's/[ \/]/-/g' | sed -e 's/"//g' |
   awk -v ex="$JEXCLUDE" '{lower = tolower($0); if(index(lower,ex) == 0) print $0}') )
  # add an "all" entry as entry 0 in the array
  COLLECTlist=( $(echo "retrieve-ALL-Collectors") )
  COLLECTlist+=("${COLLECTarray[@]}")
  COLLECTlistelements=${#COLLECTlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-COLLECTlist) K:(COLLECTlistelements) $COLLECTlistelements"; fi
}
#####
#
# called by main() to get the details of each Service
#
#####
get-COLLECTdetails(){
  echo "Collector to retrieve:"; echo ""
  for((ij=0;ij<$COLLECTlistelements;ij++))
  do
    COLLECTname=`echo "${COLLECTlist[ij]}" | sed -e 's/ /~/g'`
    echo $ij" "$COLLECTname
  done
  jfcnt=$(( $ij - 1 ))
  get-COLLECTfromNumber
  fromCOLLECTname=`echo "${COLLECTlist[fromNsponse]}" | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-COLLECTdetails) K:(fromCOLLECTname) $fromCOLLECTname"; fi

}
#####
#
# called by get-COLLECTdetails() to determine which Collector(s) to retrieve
#
#####
get-COLLECTfromNumber(){
  loop2=0
  echo ""
  echo "Input Collector Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by main() to loop through retrieveping all Services
#
#####
retrieve-COLLECTloop(){
  echo " Retrieving all Collectors:"
  for((ij=1;ij<$COLLECTlistelements;ij++))
  do
    fromCOLLECTname=`echo "${COLLECTlist[ij]}" | sed -e 's/ /~/g'`
    echo $ij" "$fromCOLLECTname
    retrieve-COLLECT
  done
}
#####
#
# called by main() and by retrieve-COLLECTloop to retrieve a single Service
#
#####
#
# zscaler sometimes cause an "error code: 1003" to be generated, so strip it out
#
retrieve-COLLECT(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-COLLECT) K:(COLLECTname) $fromCOLLECTname"; echo ""; echo ""; fi
  if [ -n "$LOGOUTPUT" ]; then
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry/collectors/$fromCOLLECTname |
      sed 's/error code: 1003//g' | sed 's/"items": \[/"service_name": "'"$fromCOLLECTname"'",\n      "collectors": \[/' | jq '.' > $LOGOUTPUT/${fromCOLLECTname}_coll.json
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry/collectors/$fromCOLLECTname
      echo ""
      echo "CURL debug off *******"
     fi
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry/collectors/$fromCOLLECTname |
      sed 's/error code: 1003//g' | sed 's/"items": \[/"service_name": "'"$fromCOLLECTname"'",\n      "collectors": \[/' | jq '.'
    #  jq '.. | select(.template_text?)' | jq '.template_text' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
  fi
}
#
#
# CONFIGLET ROUTINES
#
#
#####
#
# called by do-configlet() to get a listing of all Configlets
#
#####
get-CFGlist(){
  #create and array of all the configlets
  #
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-CFGlist) K:(JEXCLUDE) $JEXCLUDE"; fi
  CFGarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/design/configlets |
           jq -c '.items[] | .display_name, .id' | sed 's/[ \/]/-/g' | sed 'N;s/\n/,/' | sed -e 's/"//g' |
           awk -v ex="$JEXCLUDE" '{lower = tolower($0); if(index(lower,ex) == 0) print $0}') )
  # add an "all" entry as entry 0 in the array
  CFGlist=( $(echo "retrieve-ALL-configlets,ALLID") )
  CFGlist+=("${CFGarray[@]}")
  CFGlistelements=${#CFGlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-CFGlist) K:(CFGlistelements) $CFGlistelements"; fi
}
#####
#
# called by do-configlet() to get the details of each Configlet
#
#####
get-CFGdetails(){
  echo "CONFIGLET to retrieve:"; echo ""
  for((ij=0;ij<$CFGlistelements;ij++))
  do
    CFGname=`echo "${CFGlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    CFGUUID=`echo "${CFGlist[ij]}" | cut -d',' -f2`
    echo $ij" "$CFGname
  done
  jfcnt=$(( $ij - 1 ))
  get-CFGfromNumber
  fromCFGUUID=`echo "${CFGlist[fromNsponse]}"| cut -d',' -f2`
  fromCFGname=`echo "${CFGlist[fromNsponse]}" | cut -d',' -f1 | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-CFGdetails) K:(fromCFGUUID) $fromCFGUUID"; fi

}
#####
#
# called by get-CFGdetails() to determine which Configlet to retrieve
#
#####
get-CFGfromNumber(){
  loop2=0
  echo ""
  echo "Input Configlet Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by do-configlet() to loop through retrieveping all Configlets
#
#####
retrieve-CFGloop(){
  echo " Retrieveing all Configlets:"
  for((ij=1;ij<$CFGlistelements;ij++))
  do
    fromCFGname=`echo "${CFGlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    fromCFGUUID=`echo "${CFGlist[ij]}" | cut -d',' -f2`
    echo $ij" "$fromCFGname
    retrieve-CFG
  done
}
#####
#
# called by do-configlet() and by retrieve-CFGloop to retrieve a single Configlet
#
#####
retrieve-CFG(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-CFG) K:(CFGUUID) $fromCFGUUID"; fi
  #
  # if the retrieveped Configlet will be used as input into an Apstra API call
  #    the format needs to be different and contain additional fields
  #
  if [ -n "$LOGOUTPUT" ]; then
    if [ $JAPI -eq 1 ]; then
      curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/design/configlets/$fromCFGUUID |
        sed 's/error code: 1003//g' | jq '. | del(.created_at, .last_modified_at)'  > $LOGOUTPUT/${fromCFGname}_cflt.json
    else
      curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/design/configlets/$fromCFGUUID |
        sed 's/error code: 1003//g' | jq '.. | select(.template_text?)' | jq '.template_text' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g' > $LOGOUTPUT/${fromCFGname}_cflt.json
    fi
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/design/configlets/$fromCFGUUID
      echo ""
      echo "CURL debug off *******"
    fi
    if [ $JAPI -eq 1 ]; then
      curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/design/configlets/$fromCFGUUID |
        sed 's/error code: 1003//g' | jq '. | del(.created_at, .last_modified_at)'
    else
      curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/design/configlets/$fromCFGUUID |
        sed 's/error code: 1003//g' | jq '.. | select(.template_text?)' | jq '.template_text' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
    fi
  fi
}
#
#
# DASHBOARD ROUTINES
#
#
#####
#
# called by main() to get a listing of all Configlets
#
#####
get-DASHlist(){
  #create and array of all the Custom Dashboards
  DASHarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/dashboards |
   jq '.. | select(.predefined_dashboard? == "") | .label, .id' | sed 's/[ \/]/-/g' | sed 'N;s/\n/,/' | sed -e 's/"//g' |
   awk -v ex="$JEXCLUDE" '{lower = tolower($0); if(index(lower,ex) == 0) print $0}') )
  # add an "all" entry as entry 0 in the array
  DASHlist=( $(echo "retrieve-ALL-dashboards,ALLID") )
  DASHlist+=("${DASHarray[@]}")
  DASHlistelements=${#DASHlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-DASHlist) K:(DASHlistelements) $DASHlistelements"; fi
}
#####
#
# called by main() to get the details of each Configlet
#
#####
get-DASHdetails(){
  echo "Dashboard to retrieve:"; echo ""
  for((ij=0;ij<$DASHlistelements;ij++))
  do
    DASHname=`echo "${DASHlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    DASHUUID=`echo "${DASHlist[ij]}" | cut -d',' -f2`
    echo $ij" "$DASHname
  done
  jfcnt=$(( $ij - 1 ))
  get-DASHfromNumber
  fromDASHUUID=`echo "${DASHlist[fromNsponse]}"| cut -d',' -f2`
  fromDASHname=`echo "${DASHlist[fromNsponse]}" | cut -d',' -f1 | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-DASHdetails) K:(fromDASHUUID) $fromDASHUUID"; fi

}
#####
#
# called by get-DASHdetails() to determine which Configlet to retrieve
#
#####
get-DASHfromNumber(){
  loop2=0
  echo ""
  echo "Input Dashboard Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by main() to loop through retrieveping all Configlets
#
#####
retrieve-DASHloop(){
  echo " Retrieving Custom Dashboards:"
  for((ij=1;ij<$DASHlistelements;ij++))
  do
    fromDASHname=`echo "${DASHlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    fromDASHUUID=`echo "${DASHlist[ij]}" | cut -d',' -f2`
    echo $ij" "$fromDASHname
    retrieve-DASH
  done
}
#####
#
# called by main() and by retrieve-DASHloop to retrieve a single Configlet
#
#####
#
# zscaler sometimes cause an "error code: 1003" to be generated, so strip it out
#
retrieve-DASH(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-DASH) K:(DASHUUID) $fromDASHUUID"; fi
  if [ -n "$LOGOUTPUT" ]; then
    outfile=`echo "$LOGOUTPUT/${fromDASHname}_${fromBPname}_dash.json" | sed 's/ /-/g'`
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/dashboards/$fromDASHUUID |
       sed 's/error code: 1003//g' | jq 'del(.created_at, .updated_at, .updated_by, .predefined_dashboard, .id)' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g' > $outfile
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/dashboards/$fromDASHUUID
      echo ""
      echo "CURL debug off *******"
     fi
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/dashboards/$fromDASHUUID |
      sed 's/error code: 1003//g' | jq 'del(.created_at, .updated_at, .updated_by, .predefined_dashboard, .id)'  | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
  fi
}
#
#
# PROBE ROUTINES
#
#
#####
#
# called by main() to get a listing of all Probes
#
#####
get-PROBElist(){
  #create and array of all the Custom PROBEboards
  #curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/$fromBPUUID/probes |
  # jq '.items[] | select(.predefined_probe? == "") | .label, .id'

  PROBEarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/$fromBPUUID/probes |
   jq '.items[] | select(.predefined_probe? == "") | .label, .id' | sed 's/[ \/]/-/g' | sed 'N;s/\n/,/' | sed -e 's/"//g') )
  # add an "all" entry as entry 0 in the array
  PROBElist=( $(echo "retrieve-ALL-PROBES,ALLID") )
  PROBElist+=("${PROBEarray[@]}")
  PROBElistelements=${#PROBElist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-PROBElist) K:(PROBElistelements) $PROBElistelements"; fi
}
#####
#
# called by main() to get the details of each Probe
#
#####
get-PROBEdetails(){
  echo "Probe to retrieve:"; echo ""
  for((ij=0;ij<$PROBElistelements;ij++))
  do
    PROBEname=`echo "${PROBElist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    PROBEUUID=`echo "${PROBElist[ij]}" | cut -d',' -f2`
    echo $ij" "$PROBEname
  done
  jfcnt=$(( $ij - 1 ))
  get-PROBEfromNumber
  fromPROBEUUID=`echo "${PROBElist[fromNsponse]}"| cut -d',' -f2`
  fromPROBEname=`echo "${PROBElist[fromNsponse]}" | cut -d',' -f1 | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-PROBEdetails) K:(fromPROBEUUID) $fromPROBEUUID"; fi

}
#####
#
# called by get-PROBEdetails() to determine which Configlet to retrieve
#
#####
get-PROBEfromNumber(){
  loop2=0
  echo ""
  echo "Input Probe Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by main() to loop through retrieveping all Configlets
#
#####
retrieve-PROBEloop(){
  echo " Retrieving Custom Probes:"
  for((ij=1;ij<$PROBElistelements;ij++))
  do
    fromPROBEname=`echo "${PROBElist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    fromPROBEUUID=`echo "${PROBElist[ij]}" | cut -d',' -f2`
    echo $ij" "$fromPROBEname
    retrieve-PROBE
  done
}
#####
#
# called by main() and by retrieve-PROBEloop to retrieve a single Probe
#
#####
#
# zscaler sometimes cause an "error code: 1003" to be generated, so strip it out
#
retrieve-PROBE(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-PROBE) K:(PROBEUUID) $fromPROBEUUID"; fi
  if [ -n "$LOGOUTPUT" ]; then
    outfile=`echo "$LOGOUTPUT/${fromPROBEname}_${fromBPname}_prob.json" | sed 's/ /-/g'`
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/probes/$fromPROBEUUID |
      sed 's/error code: 1003//g' | jq 'del(.stages[].anomaly_count, .stages[].dynamic, .stages[].keys, .stages[].type, .stages[].warnings, .stages[].values) |
      {label: .label, description: .description, tags: .tags, processors: .processors, stages: .stages, id: .id}' |
      sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g' > $outfile
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/probes/$fromPROBEUUID
      echo ""
      echo "CURL debug off *******"
     fi
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/probes/$fromPROBEUUID |
      sed 's/error code: 1003//g' | jq 'del(.stages[].anomaly_count, .stages[].dynamic, .stages[].keys, .stages[].type, .stages[].warnings, .stages[].values) |
      {label: .label, description: .description, tags: .tags, processors: .processors, stages: .stages, id: .id}' |
      sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
  fi
}
#
#
# SERVICE ROUTINES
#
#
#####
#
# called by main() to get a listing of all Services
#
#####
get-SERVREGlist(){
  #create and array of all the Custom Services
  #curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/telemetry-service-registry | jq '.items[] | select(.builtin == false)'

  SERVREGarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/telemetry-service-registry |
   jq '.items[] | select(.builtin == false) | .service_name' | sed 's/[ \/]/-/g' | sed -e 's/"//g' |
   awk -v ex="$JEXCLUDE" '{lower = tolower($0); if(index(lower,ex) == 0) print $0}') )
  # add an "all" entry as entry 0 in the array
  SERVREGlist=( $(echo "retrieve-ALL-Services") )
  SERVREGlist+=("${SERVREGarray[@]}")
  SERVREGlistelements=${#SERVREGlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-SERVREGlist) K:(SERVREGlistelements) $SERVREGlistelements"; fi
}
#####
#
# called by main() to get the details of each Service
#
#####
get-SERVREGdetails(){
  echo "Service to retrieve:"; echo ""
  for((ij=0;ij<$SERVREGlistelements;ij++))
  do
    SERVREGname=`echo "${SERVREGlist[ij]}" | sed -e 's/ /~/g'`
    echo $ij" "$SERVREGname
  done
  jfcnt=$(( $ij - 1 ))
  get-SERVREGfromNumber
  fromSERVREGname=`echo "${SERVREGlist[fromNsponse]}" | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-SERVREGdetails) K:(fromSERVREGname) $fromSERVREGname"; fi

}
#####
#
# called by get-SERVREGdetails() to determine which Service to retrieve
#
#####
get-SERVREGfromNumber(){
  loop2=0
  echo ""
  echo "Input Service Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by main() to loop through retrieveping all Services
#
#####
retrieve-SERVREGloop(){
  echo " Retrieving all Services:"
  for((ij=1;ij<$SERVREGlistelements;ij++))
  do
    fromSERVREGname=`echo "${SERVREGlist[ij]}" | sed -e 's/ /~/g'`
    echo $ij" "$fromSERVREGname
    retrieve-SERVREG
  done
}
#####
#
# called by main() and by retrieve-SERVREGloop to retrieve a single Service
#
#####
#
# zscaler sometimes cause an "error code: 1003" to be generated, so strip it out
#
retrieve-SERVREG(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-SERVREG) K:(SERVREGname) $fromSERVREGname"; fi
  if [ -n "$LOGOUTPUT" ]; then
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry-service-registry/$fromSERVREGname | sed 's/error code: 1003//g' |
      jq '.' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g' > $LOGOUTPUT/${fromSERVREGname}_serv.json
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry-service-registry/$fromSERVREGname
      echo ""
      echo "CURL debug off *******"
     fi
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/telemetry-service-registry/$fromSERVREGname | sed 's/error code: 1003//g' | jq '.' | sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
  fi
}
#
#
# WIDGET ROUTINES
#
#
#####
#
# called by main() to get a listing of all Widgets
#
#####
get-WIDGETlist(){
  #create and array of all the Custom WIDGETboards
  #curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/hwidgets |
  # jq '.items[] | .label, .id'

  WIDGETarray=( $(curl -s -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" -k -X GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/widgets |
   jq '.items[] | .label, .id' | sed 's/[ \/]/-/g' | sed 'N;s/\n/,/' | sed -e 's/"//g' |
   awk -v ex="$JINCLUDE" '{lower = tolower($0); if(index(lower,ex) != 0) print $0}') )
  # add an "all" entry as entry 0 in the array
  WIDGETlist=( $(echo "retrieve-ALL-WIDGETS,ALLID") )
  WIDGETlist+=("${WIDGETarray[@]}")
  WIDGETlistelements=${#WIDGETlist[@]}
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-WIDGETlist) K:(WIDGETlistelements) $WIDGETlistelements"; fi
}
#####
#
# called by main() to get the details of each Widget
#
#####
get-WIDGETdetails(){
  echo "Widget to retrieve:"; echo ""
  for((ij=0;ij<$WIDGETlistelements;ij++))
  do
    WIDGETname=`echo "${WIDGETlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    WIDGETUUID=`echo "${WIDGETlist[ij]}" | cut -d',' -f2`
    echo $ij" "$WIDGETname
  done
  jfcnt=$(( $ij - 1 ))
  get-WIDGETfromNumber
  fromWIDGETUUID=`echo "${WIDGETlist[fromNsponse]}"| cut -d',' -f2`
  fromWIDGETname=`echo "${WIDGETlist[fromNsponse]}" | cut -d',' -f1 | sed -e 's/~/ /g'`
  if [ $DEBUG -eq 1 ]; then output-debug "R:(get-WIDGETdetails) K:(fromWIDGETUUID) $fromWIDGETUUID"; fi

}
#####
#
# called by get-WIDGETdetails() to determine which Configlet to retrieve
#
#####
get-WIDGETfromNumber(){
  loop2=0
  echo ""
  echo "Input Widget Number or Q to quit"
  while [ $loop2 -eq 0 ]
  do
     read fromNsponse
     case $fromNsponse in
       [0-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][1-9])
          if [ "$fromNsponse" -ge "0" ] && [ "$fromNsponse" -le "$jfcnt" ]; then
             loop2=1
          else
             echo " Number entered is not a valid selection...try again"
          fi
          ;;
       q|Q)
          exit
          ;;
       *) echo " Invalid character...try again"
          ;;
     esac
     if [ $DEBUG -eq 1 ]; then output-debug "R:(get-nodefromNumber) K:(fromNsponse) $fromNsponse"; fi
  done
}
#####
#
# called by main() to loop through retrieveping all Configlets
#
#####
retrieve-WIDGETloop(){
  echo " Retrieveing Custom Widgets:"
  for((ij=1;ij<$WIDGETlistelements;ij++))
  do
    fromWIDGETname=`echo "${WIDGETlist[ij]}" | cut -d',' -f1 | sed -e 's/ /~/g'`
    fromWIDGETUUID=`echo "${WIDGETlist[ij]}" | cut -d',' -f2`
    echo $ij" "$fromWIDGETname
    retrieve-WIDGET
  done
}
#####
#
# called by main() and by retrieve-WIDGETloop to retrieve a single Widget
#
#####
#
# zscaler sometimes cause an "error code: 1003" to be generated, so strip it out
#
retrieve-WIDGET(){
  if [ $DEBUG -eq 1 ]; then output-debug "R:(retrieve-WIDGET) K:(WIDGETUUID) $fromWIDGETUUID"; fi
  if [ -n "$LOGOUTPUT" ]; then
    outfile=`echo "$LOGOUTPUT/${fromWIDGETname}_${fromBPname}_widg.json" | sed 's/ /-/g'`
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/widgets/$fromWIDGETUUID |
      sed 's/error code: 1003//g' | jq 'del(.created_at, .updated_at, .updated_by, .referencing_dashboards, .id)' |
      sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g' > $outfile
  else
    if [ $DEBUG -eq 1 ]; then
      echo "CURL debug on *******"
      curl -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/widgets/$fromWIDGETUUID
      echo ""
      echo "CURL debug off *******"
     fi
    curl -s -k -H "AuthToken: ${Apstratoken}" -H "Content-Type: application/json" GET https://$ApstraIP/api/blueprints/$fromBPUUID/iba/widgets/$fromWIDGETUUID |
      sed 's/error code: 1003//g' | jq 'del(.created_at, .updated_at, .updated_by, .referencing_dashboards, .id)' |
      sed 's/^"\(.*\)"$/\1/' | sed 's/\\n/\n/g'
  fi
}
#
#
#
#####
#
# call by main() to determine what type of file needs to be processed
#
#####
do-case(){
  case "$Esponse" in
    0)
      exit 0
    ;;
    1)
      echo "Processing Collector"; echo ""
      do-collector
    ;;
    2)
      echo "Processing Configlets"; echo ""
      do-configlet
    ;;
    3)
      echo "Processing Dashboard"; echo ""
      do-dashboard
    ;;
    4)
      echo "Processing Probe"; echo ""
      do-probe
    ;;
    5)
      echo "Processing Service Registery"; echo ""
      do-service
    ;;
    6)
      echo "Processing Widgets"; echo ""
      do-widget
    ;;
    *)
      echo "Badness ... I should NOT have reached this part of the code"
      echo " ...exit()"
    ;;
  esac
}
#####
#
# called by do-case() to Retrieve a Configlet(s)
#
#####
do-configlet(){
  get-CFGlist
  get-CFGdetails
  if [ $fromCFGUUID == "ALLID" ]; then
    retrieve-CFGloop
  else
    retrieve-CFG
  fi
  if [ $DEBUG -eq 0 ]; then clear-json; fi
}
#####
#
# called by do-case() to Retrieve the Collector(s)
#
#####
do-collector(){
  get-COLLECTlist
  get-COLLECTdetails
  if [ $fromCOLLECTname == "retrieve-ALL-Collectors" ]; then
    retrieve-COLLECTloop
  else
    retrieve-COLLECT
  fi
}
#####
#
# called by do-case() to Retrieve a Dashboard(s)
#
#####
do-dashboard(){
  get-BPlist
  get-BPFdetails
  get-DASHlist
  get-DASHdetails
  if [ $fromDASHUUID == "ALLID" ]; then
    retrieve-DASHloop
  else
    retrieve-DASH
  fi
}
#####
#
# called by do-case() to Retrieve a Probe(s)
#
#####
do-probe(){
  get-BPlist
  get-BPFdetails
  get-PROBElist
  get-PROBEdetails
  if [ $fromPROBEUUID == "ALLID" ]; then
    retrieve-PROBEloop
  else
    retrieve-PROBE
  fi
}
#####
#
# called by do-case() to Retrieve a Service Registry(s)
#
#####
do-service(){
    echo ""
    get-SERVREGlist
    get-SERVREGdetails
    if [ $fromSERVREGname == "retrieve-ALL-Services" ]; then
      retrieve-SERVREGloop
    else
      retrieve-SERVREG
    fi
}
#####
#
# called by do-case() to Retrieve a Widget(s)
#
#####
do-widget(){
  get-BPlist
  get-BPFdetails
  get-WIDGETlist
  get-WIDGETdetails
  if [ $fromWIDGETUUID == "ALLID" ]; then
    retrieve-WIDGETloop
  else
    retrieve-WIDGET
  fi
}
#####
#
# routines used for debugging
#
#####
#  Called to output uniform DEBUG messages when -x arg is passed
output-debug(){
  local inputstr=$1
  echo "DEBUG: $inputstr" 1>&2
}
#####
#
# main()
#
#####
do-args
clear-json
build-tokens
get-tokens
get-WhatToRetrieve
do-case
if [ $DEBUG -eq 0 ]; then clear-json; fi
